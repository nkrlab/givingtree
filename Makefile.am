# Copyright (C) 2012 Nexon Korea Corporation All Rights Reserved.
#
# This work is confidential and proprietary to Nexon Korea Corporation and
# must not be used, disclosed, copied, or distributed without the prior
# consent of Nexon Korea Corporation.


# THIS FILE IS AUTOMATICALLY GENERATED.
#
# YOU MAY WANT TO EDIT TO MEET YOUR TASTE BUT YOU MUST NOT CALL
# "funapi-admin.py create_project", again.

AUTOMAKE_OPTIONS = foreign
ACLOCAL_AMFLAGS = -I m4

################################################################################
# Build 를 위한 환경 변수 설정
################################################################################

INSTALL_PACKAGE_NAME = $(PACKAGE_DEB)_$(VERSION)_install

# Build 과정 중에 생성되서 이용되는 source file 들.
# E.g., protobuf 결과 파일들.
# 참고: BUILT_SOURCES 는 build 전에 먼저 생성된다.
BUILT_SOURCES =

# 'make dist' 로 source distribution 을 만들 때
# 기본적인 source 와 header 외에 추가로 포함될 file 들.
MANIFEST_FILES =
EXTRA_DIST = $(MANIFEST_FILES)

# 'make clean' 을 했을 때 기본적인 binrary/library 외에 추가로
# 지워져야 될 file 들.
CLEANFILES = $(BUILT_SOURCES)

# unit test program 들.
UNITTESTS =

# 'make all' 을 한 다음에 수행될 hook
LOCAL_HOOKS =

# 'make install' 시 data file 들을 복사하고 수행될 hook 들
INSTALL_DATA_HOOKS =

# 'make install' 시 exec file 들을 복사하고 수행될 hook 들
INSTALL_EXEC_HOOKS =


# 'make install' 시 설치될 내용들
#   /usr/share/<pkgName> 에 설치될 data file 들.
pkgdata_DATA =
#   /usr/lib/<pkgName> 에 설치될 library file 들.
pkglib_LTLIBRARIES =

# 'make install' 시 빠져야 되는 것들.
noinst_PROGRAMS = $(UNITTESTS)
noinst_LTLIBRARIES =


################################################################################
# Sub-module 들을 포함하기 위한 include.
################################################################################

# Automake 의 SUBDIRS 를 쓸 경우, 각 subdir 을 순서대로 모두 작업
# 해야되므로 -j 의 이득을 보기 힘들다. 따라서 include 를 쓴다.
include $(top_srcdir)/src/automake.mk


################################################################################
# top-level 의 make target 들.
################################################################################

lint:
	make -j 1 lint-sequentially


lint-sequentially: cpp-lint py-lint


cpp-lint: $(DIST_SOURCES)
	@echo "==== Running cpplint on h/cpp files ==="
	$(top_srcdir)/tools/cpplint.py $(DIST_SOURCES)


py-lint: $(SCRIPTS)
	@if [ ! $(SCRIPTS) ]; then \
	  echo "py-lint: no target scripts.. pass."; \
	else \
	  @echo "==== Running pyflakes on py files ==="; \
	  pyflakes $(SCRIPTS) || true; \
	  @echo "==== Running pylint on py files ==="; \
	  pylint --indent-string="  " --reports=no \
	      --disable=C0111,R0902,R0903,R0201,W0511 $(SCRIPTS) || true; \
	  @echo "==== Running pep8 on py files ==="; \
	  pep8 --ignore=E111 $(SCRIPTS) || true; \
	fi


test:
	make -j 1 test-sequentially


test-sequentially: unit-test


unit-test: $(UNITTESTS)
	@echo "==== Running unit tests ==="
	@for f in $^; do echo "--- $$f ---"; $$f; done


package: all
	( \
	 tmpdir=`mktemp --directory`; \
	 make DESTDIR=$$tmpdir install; \
	 curdir=`pwd`; \
	 (cd $$tmpdir; tar jcf $$curdir/$(INSTALL_PACKAGE_NAME).tar.bz2 .); \
	 rm -rf $$tmpdir \
	)


################################################################################
# make 시에 발생하는 hook 들.
################################################################################

# 'make all' 을 한 다음에 수행될 hook
all-local: $(LOCAL_HOOKS)

# 'make install' 시 data file 들을 복사하고 수행될 hook 들
install-data-hook: $(INSTALL_DATA_HOOKS)

# 'make install' 시 binrary file 들을 복사하고 수행될 hook 들
install-exec-hook: $(INSTALL_EXEC_HOOKS)

